/*
The MACE syntax file
====================

This file will explain all syntax used in v1.0

Spaces, tabs and curly brackets are consistent throughout the file.
After namespaces, classes and switches comes an enter followed by curly brackets.
After all other code scopes come curly brackets without an enter.

First we will define the syntax that makes it possible to convert this file easily to an HTML page.
No tags are used inside other tags.

The shortcodes are:
//chapter
Your chapter here


//title
Your title here


//subtitle
Your subtitle here


//text
Your text here


//code
Your code here


//comment
Your comment here (this text should not be compiled to html)

//tablehead
Your table titles here

//table
Your table elements here seperate collums by a comma

__Your label here__

*/

//start

//chapter
Namespaces

//title
Creating Namespaces (namespace)

//text
The __namespace__ keyword is used to create a __namespace__.
To create a __namespace__ write the __namespace__ keyword, followed by the name of the __namespace__ with opening and closing curly brackets.
When defining fields, methods and classes inside a __namespace__, they are automatically __static__, so the __static__ keyword is not required.

//code
namespace MyNamespace
{
    // Your classes and static fields.
}

//text
Namespace with classes, methods and fields

//code
namespace MyNamespace
{
    int myInt = 0;

    void myMethod(){
        // Your method code.
    }

    class MyClass
    {
        // Your fields and methods.
    }
}

//title
Using Namespaces (using)

//text
The __using__ keyword is used to use a namespace. 
To use a namespace write __using__ followed by the path to the location of the namespace ending with a __;__.
All public elements in the namespace can be directly accessed.

//code
using ./MyNamespace;
// Print public element from MyNamespace.
print(myElement);

//subtitle
Using elements

//text
The __,__ can be used to use specific elements of a namespace.
To use specific elements add your elements separated by commas.
Next, write __from__, followed by the path and your namespace ending with a __;__.
To access an element of a namespace, use the name of the elements.

//code
using myFirstElement, mySecondElement from ./MyNamespace;
// Print public elements from MyNamespace.
print(myFirstElement);
print(mySecondElement);

//subtitle
Naming a namespace (as)

//text
The __as__ keyword can used to name a namespace. 
To name your namespace write __as__ after your namespace path followed by a given namespace name.
To access an element of a named namespace, write the given name followed by an element.

//code
using ./MyNamespace as MyNamedNamespace;
// Print public element from MyNamespace named MyNamedNamespace.
print(MyNamedNamespace.myFirstElement);

using myFirstElement, mySecondElement from ./MySecondNamespace as MySecondNamedNamespace;
// Print public element from MyNamespace named MySecondNamedNamespace.
print(MySecondNamedNamespace.mySecondElement);

//subtitle
Renaming elements (as)

//text
The __as__ keyword can be used to rename namespace elements. 
To rename your namespace elements, write __as__ after the element followed with your new name;
To access a renamed element of a namespace, use the renamed name of the elements.

//code
using myFirstElement as myFirstRenamedElement, mySecondElement as mySecondRenamedElement from ./MyNamespace;
// Print renamed public elements from MyNamespace 
print(myFirstRenamedElement);
print(mySecondRenamedElement);

using myFirstElement as myFirstRenamedElement from ./MySecondNamespace as MySecondNamedNamespace;
// Print renamed public elements from MySecondNamespace named MySecondNamedNamespace.
print(MySecondNamedNamespace.myFirstRenamedElement);

//title
Using system namepaces (system)

//text
The __system__ keyword is used to use any namespace from the mace system namespaces.
To use the system namepaces, write __system__ before your __using__ statement. 
This wil start your namespace path in the system directory. This means that adding the ./ prefix in your namespace path is not required.

//code
system using Networking/RequestManager;
// Print return value from the getURL method from RequestManager.
print(getURL("https://google.com"));

//chapter
Classes

//title
Creating Classes (class)

//text
The __class__ keyword is used to create a class.
To create a class write __class__ followed by the name of the class and __{}__.
You can define any fields or methods in a class.
To create an instance of a class use the class name followed by __()__ ending with a __;__.
You can only define a class in a namespace.
Classes will automatically be private.

//code
namespace MyNamespace
{
    class MyClass
    {
       // Your fields and methods.
    }

    class MySecondClass
    {
        int myInt = 0;

        void myMethod(){
            // Your method code.
        }
    }
}

// Your constructors used.
Myclass myClass = MyClass();
MySecondClass mySecondClass = MySecondClass();

//title
Inheritance (extend)

//text
To inherit a class from another class use the a __extend__ after the name of the child class followed by the name of the class you want to inherit from.
When a class inherits from another class you can access the fields and methods of the parent class.

//code
class MyClass
{
    public int myInt = 0;

    public void myMethod(int value){
        // Your method code.
    }
}

class MySecondClass extend MyClass
{
    MySecondClass(){
        myMethod(myInt);
        // Your constructor code.
    }
}

//title
Abstraction (abstract)

//text
The __abstract__ keyword is used to create abstract classes.
Write __abstract__ before your class, field or method to make it abstract.
When a class, field or method is abstract it means that it cannot be used on its own.

//subtitle
Classes

//text 
When a class is abstract the class can only be inherited by another class.
This means that you can not create an instance of an abstract class.

//code
abstract class MyClass
{
    public int myInt = 0;

    public void myMethod(int value){
        // Your method code.
    }
}

class MySecondClass extend MyClass
{
    MySecondClass(){
        myMethod(myInt);
        // Your constructor code.
    }
}

//subtitle
Fields and methods

//text
Only abstract classes and interfaces can contain abstract fields and methods. 
When a field or method is abstract this means that they need to be implemented in the child class.
To implement an abstract field or method write __override__ before the field or method.
It is important that the field you want to implement has the same access modifier, type and identifier as the one you want to override.
If a field is an abstract field it may have a default value.
When the child class defines the field it overrides the value, if the child class only declares the field the default value of the parent class.
The same applies for methods, the implemented method needs to have the same access modifier, return type, identifier and parameters as the method you want to override.
If a method is an abstract field it may have a body.
When the child class defines the method it overrides the code in the body of the abstract class, if the child class only declares the method, the code of the parent class is run.
Note that definition of a field or method must happen, either or both in the parent and child class.

//code
abstract class MyClass
{
    public abstract int myInt = 0;

    abstract string myString = 'Value';

    protected abstract double myDouble;

    public abstract void myMethod(int value){
        print(value);
        // Your abstract method code.
    }

    abstract void mySecondMethod(string value){
        print(value);
        // Your abstract method code.
    }

    protected abstract void myThirdMethod(double value);
}

class MySecondClass extend MyClass
{
    public override int myInt;

    override string myString 'Overwritten value';

    protected override double myDouble = 3.3;
    
    public override void myMethod(int value);
    
    override void mySecondMethod(string value){
        print(value + "Overwritten");
        // Your overwritten method code.
    }

    protected override void myThirdMethod(double value){
        print(value);
        // Your overwritten method code.
    }
}

//title
Sealing (sealed)

//text
The __sealed__ keyword is used to make a class sealed.
When a class is __sealed__, the class cannot be used as a super class.
The class cannot be inherited by another class.
A sealed class cannot contain abstract fields or methods.

//code
sealed class MyClass
{
    int myInt;

    void myMethod(int value){
        // Your method code.
    }
}

//title
Static (static)

//text
The __static__ keyword is used to make a class or elements static.
When a class is __static__, the class cannot be used as a super class.
The class cannot be inherited by another class.
A static class can only contain static fields or methods.
A static class cannot be instanciated.

//code
static class MyClass
{
    static int myInt;

    static void myMethod(int value){
        // Your method code.
    }
}

//title
Super class (super) and This class (this)

//text
When using the same identifier in the child class as in the parent class, the child class will override the parent identifier.
Use __super__ to only access the fields and methods of the parent class.
Use __this__ to only access the fields and methods of the current class.

//code
class MyClass
{
    public int myInt = 0;

    public void myMethod(int value){
        // Your method code.
    }
}

class MySecondClass extend MyClass
{
    MySecondClass(){
        myMethod();
        super.myMethod(myInt);
        this.myMethod(myInt);
        // Your constructor code.
    }

    public void myMethod(int value){
        // Your method code.
    }
}

//title
Interfaces (interface)

//text
The __interface__ keyword is used to create an interface.
To create an interface write __interface__ followed by the name of the interface, the keyword __implement__ and __{}__.
You can define any fields or methods in an interface.
Note that an interfaces can contain only abstract fields and methods.
Fields cannot be defined and methods cannot have a body.
Interfaces can be compared to blueprints for classess.
You can only define an interface in a namespace.

//code
interface MyInterface
{
    abstract int myInt;

    abstract void myMethod();
}

class MyClass implement MyInterface
{
    override int myInt = 0;

    override void myMethod(){
        // Your implemented method code.
    }
}

//title
Constructor

//text
To create a constructor write the class name followed by a function body.
Named constructors can be created by writing the constructor followed by an access operator and your constructor name.
The code of a constructor will be run when you create an instance of the class.

//code
class MyClass
{
    MyClass(){
        // Your constructor code.
    }

    MyClass.MyNamedConstructor(){
        // Your named constructor code.
    }
}

// Your constructor used.
MyClass myClass = MyClass();
// Your named constructor used.
myClass = MyClass.MyNamedConstructor();

//text
A constructor can call another constructor by using a __:__ after the parameter body followed by __this__.
If you want to call a named constructor use the access operator and your constructor name after the this keyword.

//code
class MyClass
{
    MyClass() : this.MySecondNamedConstructor(){
        // Your constructor code.
    }

    MyClass.MyNamedConstructor() : this(){
        // Your named constructor code.
    }

    MyClass.MySecondNamedConstructor(){
        // Your second named constructor code.
    }
}

//title
Destructor (~)

//text
A destructor is optional, but if created it will be run when a instance of a object is deleted.
No parameters can be added to the destructor parameter body.

//code
class MyClass
{
    ~MyClass(){
         // Your destructor code.
    }
}

//title
Methods

//subtitle
Short assignment

//text
Short assignment of fields in class methods or constructors can be accomplished by using a different syntax in the parameter body.
When using short assignment the parameters are assigned to the variables in the class automatically.
Short assignment can also be used with the super class.
Note that code can still be added to the body of the method as shown below and that the parameters can still be used inside the body.

//code
class MyClass
{
    int myInt = 0;
    string myString = "Hello World!"

    MyClass(this.myInt, this.myString){
        // Your constructor code.
    }

    myMethod(this.myInt, this.myString){
        myString += " Goodbye!"
        // Your method code.
    }
}

//code
class MyClass
{
    int myInt = 0;
}

class MySecondClass extend MyClass
{
    int mySecondInt;
    MySecondClass(this.mySecondInt, super.myInt){
        // Your constructor code.
    }
}

//text
To have a constant or read only variable in your class, but you want to initialize it in the constructor, use the keyword __initialize__.
The variable can also be initialized via short assignment.
The variable can only be overwritten in the constructor scope. 

//code
class MyClass
{
    initialize const int myInt;
    initialize readonly string myString = "Hello World!";

    MyClass(this.myInt, myString){
        this.myString = myString;
        // Your constructor code.
    }
}

//subtitle
Getters (get) and Setters (set)

//text
Getters and setters are methods that will be run when the specific field is accessed.
The keywords __public__, __private__ and __protected__ can be added to getters and setters.
These access modifiers override the default getters and setters of the fields.
Note that in the example the integer was initialially private, but has become public because of the getter and setter.

//code
class MyClass
{
    private int myInt;

    MyClass(this.myInt){
        // Your constructor code.
    }

    public get myInt(){
        // Your getter code.
        return myInt + 1;
    }

    protected set myInt(int myInt){
        this.myInt = myInt - 1;
        // Your setter code.
    }
}

//title
Lambda funtions

//TODO

//chapter
Variables

//text
Mace has the following primitive data types.
Define variables by writing the following structure; a variable keyword or object type, a unique identifier, an equal sign, your expression and a semicolon.

//tablehead
Primitive`  Meaning

//table
string`     Stores any array of characters.
char`       Stores any singular character.
int`        Stores any whole number between -2,147,483,648 and 2,147,483,647.
double`     Stores any floating point number, between -1.7*10^308 and 1.7*10^308.
bool`       Stores true or false.
percent`    Stores a fraction.

//title
Strings (string)

//text
A string is an object that stores an array of characters.
You can define a string by using __''__ or __""__.

//code
string myString = "Hello World!";
myString = 'Hello World!';

//subtitle
Concatenation

//text
To concatenate two strings use the plus operator.
You can concatenate literal strings and string variables.

//code
string myString = 'Hello ' + "World!";
// myString becomes: 'Hello World!'
string myDoubleString = myString + myString;
// myDoubleString becomes: 'Hello World!Hello World!'

//subtitle
Escape characters (\)

//text
Use escape characters to use characters that would normaly have a different meaning or to give a character a different meaning.
To use escape character use __\__.
Escape characters can be used in a string or char.

//tablehead
Escape chapter` Meaning

//table
\n`             New line
\b`             Backspace
\t`             Tab
\$`             A literal __$__
\\`             A literal __\__
\'`             A literal __'__
\"`             A literal __"__

//code
string myNewLine = 'This is on line one,\nAnd this on line two';
/*
// When printed:
'This is on line one,
And this on line two'
*/      
string myBackspace = 'This removes the last character from this string\b';
// When printed: 'This removes the last character from this strin'
string myTab = 'This adds a tab\tin this string';
// When printed: 'This adds a tab   in this string'
string myDollarSign = 'This escapes the use of the \$ for using interpolation';
// myDollarSign becomes: 'This escapes the use of the $ for using interpolation'
string myBackslash = 'This escapes the use of the \\ for escaping characters';
// myBackslash becomes: 'This escapes the use of the \ for escaping characters'
string mySingleQuote = 'This escapes the use of the \' for creating a string or char';
// mySingleQuote becomes: 'This escapes the use of the ' for creating a string or char'
string myDoubleQuote = "this escapes the use of the \" for creating a string or char";
// myDoubleQuote becomes: 'this escapes the use of the " for creating a string or char'

//subtitle
Interpolation

//text
To use string interpolation use a __$__ or use __${}__.
When only using the __$__ you need to have a space between the variable and the next part of the string 

//code
string myName = 'Jack';

string myString = 'Hello $myName how are you doing?'
// myString becomes: 'Hello Jack how are you doing?'
myString = 'Hello ${myName + " how"} are you doing?'
// myString becomes: 'Hello Jack how are you doing?'

//subtitle
Indexing

//text
Read a character from a string by using __[]__.
Indexing starts at index 0.

//code
string myString = 'Hello World!';
char myChar = myString[6];
// myChar becomes: 'W'

//title
Characters (char)

//text
A __char__ is a primitive that stores just one character.
You can define a __char__ by using __''__ or __""__.

//code
char myChar = "H";
myChar = '!';

//subtile
Concatenation

//text
If you want to concatenate two characters you need to store them in a __string__.

//code
string myTwoChars = 'H' + "!";
// myTwoChars becomes: 'H!'

//subtile
Escape characters (\)

//text
To use escape characters in a string use __\__.
Escape characters can be used in a string or char.

//code
char mySingleQuoteChar = '\'';
// mySingleQuoteChar becomes: '''
char myDoubleQuoteChar = "\"";
// myDoubleQuoteChar becomes: '"'

//title
Integers (int)

//text
An __int__ is a primitive that can store any whole number between -2,147,483,648 and 2,147,483,647.

//code
int myInt = 13135;

//subtitle
Int with a different base

//text
When using a number from a different base use one of the following prefixes.

//tablehead
Prefix` Meaning`    Base

//table
0b`     Binary`     2
0o`     Octal`      8
0x`     Hexadecimal`16

//code
int myBinaryInt = 0b01010;
// myBinaryInt becomes: 20
int myOctalInt = 0o37461;
// myOctalInt becomes: 16177
int myHexadecimalInt = 0xD24AF;
// myHexadecimalInt becomes: 861359

//subtitle
Indexing

//text
To get a digit from an __int__, access the __int__ in the same way as how you would get a __char__ from a string.
Indexing starts at index 0.
// https://www.geeksforgeeks.org/find-first-last-digits-number/#:~:text=To%20find%20first%20digit%20of%20a%20number%20we%20divide%20the,left%20with%20the%20first%20digit.
// ^aproach 2

//code
int myInt = 13135;
int myIndexedInt = myInt[2];
// myInexedInt becomes: 1

//title
Doubles (double)

//text
A __double__ is a primitive that can store any floating point number, between -1.7*10^308 and 1.7*10^308 with a precision of 15 digits.
To define a __double__ use a dot where the decimal digits should be.
Note that a __double__ is not perfectly precise when used in calculations.

//code
double myDouble = 13135.13135;

//text
Literal int values and numbers from different bases are allowed to be assigned to a double.

//code
double myIntegerDouble = 13135;
// myIntegerDouble becomes: 13135.0
double myBinaryDouble = 0b01010;
// myBinaryDouble becomes: 20.0
double myOctalDouble = 0o37461;
// myOctalDouble becomes: 16177.0
double myHexadecimalDouble = 0xD24AF;
// myHexadecimalDouble becomes: 861359.0

//subtitle
Exponent of 10 (e)

//text
multiply a number to 10 to the power of any integer number by use the suffix __e__.
You can use a positive or negative integer exponent.

//code
double myDouble = 4.3e5;
// myDouble becomes: 430000.0
myDouble = 3.8e-2;
// myDouble becomes: 0.038

//title
Booleans (bool), (true), (false)

//text
A __bool__ is a primitive that can store either a zero or a one.
Because there are only two states, the 0 is also equal to __false__, and the 1 is equal to __true__;
All datatypes that are empty or null are false if casted to an boolean.
If they contain a value they are true.

//tablehead
Datatype`       Empty value

//table
int`            0
double`         0.0
string`         ''
string[]`       []
Map<string,int>`{}
Set<string>`    Set.empty
List<string>`   []

//code
bool myBoolean = true;
myBoolean = (bool)0
// myBoolean becomes: false

myBoolean = (bool)13135
// myBoolean becomes: true

//chapter
Operators

//title
Arithmetic

//text
Arithmetic operators are mostly used so to apply mathematical equations to values.
Some of these operators can be used on strings, arrays, maps, sets and lists.

//tablehead
Operator`   Name`                       Example

//table
+`          Addition`                   myInt + 5
++`         Increment`                  ++myInt    
-`          Negatation or Subtraction`  myInt - 5    
--`         Decrement`                  --myInt    
*`          Multiplication`             myInt * 5
/`          Division`                   myInt / 5
^`          Exponentiation`             myInt ^ 5
!`          Factorization`              myInt!
%`          Modulation`                 myInt % 5          

//subtitle
Addition (+)

//text
The __+__ operator is used when any two numbers need to be added to each other.

//code
int myInt = 1 + 3;
// myInt becomes: 4

//text
The __+__ can also be used to concatenate strings, arrays, sets, maps or lists.
Concatenating strings, arrays, sets, maps or lists will add the values together and return a new string, array, sets, maps or lists.

//code
string myString = 'Hello ' + 'World!';
// myString becomes: 'Hello World!'
int[] myArray = [1,3] + [2,4];
// myArray becomes: [1,3,2,4]
Map<string,int> myMap = {'firstValue': 1} + {'secondValue': 2};
// myMap becomes: {'firstValue': 1, 'secondValue': 2}
Set<int> mySet = {1,4,2} + {2,3,8};
// mySet becomes: {1,4,2,3,8}
List<int> myList = [1,3] + [2,4];
// myList becomes: [1,3,2,4]

//subtitle
Increment (++)

//text
The __++__ operator is used to increment a number variable by 1 before using it;

//code
int myInt = 0;
myInt = ++myInt;
// myInt becomes: 1

//subtitle
Negatation or Subtraction (-)

//text
The __-__ operator is used when a number needs to be negated or two numbers need to be subtracted from each other.

//code
int myInt = -1;
myInt = 4 - 3;
// myInt becomes: 1
myInt = 3 -4;
// myInt becomes: -1

//text
The __-__ operator can also be used to subtract strings, arrays, maps, sets or lists.
When subtracting a string from another string, the order of the characters is important.
Note here that only one substring that is equal to the righthand string will be removed.
When subtracting an array from another array, the order of the elements is important. The same applies for lists.
Note here that all the elements in the righthand array will be removed from the lefthand array if they exist.
When subtracting a map from another map, the order of the elements is not important. The same applies for lists.
Searching and removing will start at the end.

//code
string myString = 'Hello World!' - ' World!';
// myString becomes: 'Hello'
int[] myArray = [1,2,4,3] - [2,4];
// myArray becomes: [1,3]
Map<string,int> myMap = {'firstValue': 1, 'secondValue': 2} - {'firstValue': 1};
// myMap becomes: {'secondValue': 2}
Set<int> mySet = {1,4,2} - {2,3,8};
// mySet becomes: {1,4}
List<int> myList = [1,2,4,3] - [2,4];
// myList becomes: [1,3]

//subtitle
Decrement (--)

//text
The __--__ operator is used to decrement a number variable by 1 before using it;

//code
int myInt = 0;
myInt = --myInt;
// myInt becomes: -1

//text
The __--__ operator can also be used to subtract strings, arrays or lists.
When applying this operator, the last element will be removed.

//code
string myString = --'Hello world!'
// myString becomes: 'Hello world'
int[] myArray = --[1,2,3,4];
// myArray becomes: [1,2,3]
List<int> myList = --[1,2,3,4];
// myList becomes: [1,2,3]

//subtitle
Multiplication (*)

//text
The __*__ operator is used when any two numbers need to be multiplied.

//code
int myInt = 3 * 4;
//myInt becomes: 12

//text
The __*__ operator can also be used to multiply strings, sets or arrays.
Multiplying a string, set or array will repeat the values inside and return a new string, set or array.
Note you must use an integer value when multiplying with a number.
When multiplying an array or a set with another array or set, the result will be a cartesian product.

//code
string myString = 'Hello World!' * 2;
// myString becomes: 'Hello World!Hello World!'
int[] myArray = [1,2,3,4] * 2;
// myArray becomes: [1,2,3,4,1,2,3,4]
List<int> myList = [1,2,3,4] * 2;
// myList becomes: [1,2,3,4,1,2,3,4]
Set<int[]> mySet = {1,2,3,4} * {5,6,7,8};
// mySet becomes: {[1,5],[1,6],[1,7],[1,8],[2,5],[2,6],[2,7],[2,8],[3,5],[3,6],[3,7],[3,8],[4,5],[4,6],[4,7],[4,8]}

//subtitle
Division (/)

//text
The __/__ operator is used when any two numbers need to be divided by each other.

//code
int myInt = 4 / 2;
// myInt becomes: 2

//text
The __/__ operator can also be used to divide strings, arrays or lists.
Dividing a string, array or list by a value will count the occurrences of the given value and returns an int.
Note that the order matters.

//code
int countString = 'Hello World!' / 'l';
// countString becomes: 3
int countArray = [1,2,3,4,2,3] / [2,3];
// countArray becomes: 2
countArray = [3,3,3] / [3,3];
// countArray becomes: 1
int countList = [1,2,3,4,2,3] / [2,3];
// countList becomes: 2

//subtitle
Exponentiation (^)

//text
The __^__ operator is used when a number needs to be exponented by an other number.

//code
int myInt = 3 ^ 2;
// myInt becomes: 9

//subtitle
Factorization (!)

//text
The __!__ operator is used when the factorial needs te be found of a number.

//code
int myInt = 5!;
// myInt becomes: 120

//subtitle
Modulation (%)

//text
The __%__ operator is used when the remainder of a number needs te be found after subtraction by an other number just before it becomes negative.

//code
int myInt = 5 % 2;
// myInt becomes: 1

//text
The __%__ operator can also be used to modulate strings or arrays.
Modulating a string or array will remove all the occurrences of the value(s) of the righthand side from the lefthand side and return a new string or array.
Note that the order matters.

//code
string myString = 'Hello World!' % 'l';
// myString becomes: 'Heo Word!'
int[] myArray = [1,2,3,4,2,3] % [2,3];
// myArray becomes: [1,4]
myArray = [3,3,3] & [3,3];
// myArray becomes: [3]
List<int> myList = [1,2,3,4,2,3] % [2,3];
// myList becomes: [1,4]

//title
Bitwise depended

//text
Depended bitwise operators can be used to manipulate two bit sequences in relation to each other.
The result will be a combination of the two via specific rules.

//tablehead
Operator`   Name

//table
&`          Bitwise AND
|`	        Bitwise OR
^^`	        Bitwise XOR

//subtitle
Bitwise AND (&)

//text
The __&__ operator is used to check if both bits are one. 
If both bits are one a one wil be return in the new sequence of bits.
If one or both bits are zero a zero wil be return in the new sequence of bits.

//code
int myInt = 0b1100 & 0b1010;
// myInt becomes: 0b1000 which is 8

myInt = 12 & 10;
// myInt becomes: 8

//text
The __&__ can also be used to get the intersect of two strings, arrays, lists or sets.
Note that the return type of the intersect will always be a set.

//code
Set<string> myStringSet = '1235' & '245';
// myStringSet becomes: {'2','5'}

Set<int> mySet = [1,2,3,5] & [2,4,5];
// mySet becomes: {2,5}
 
mySet = {1,2,3,5} & {2,4,5};
// mySet becomes: {2,5}

//subtitle
Bitwise OR (|)

//text
The __|__ operator is used to check if one or both bits are one. 
If one or both bits is one a one wil be return in the new sequence of bits.
If both bits are zero a zero wil be return in the new sequence of bits.

//code
int myInt = 0b1100 | 0b1010;
// myInt becomes: 0b1110 whitch is 14

myInt = 12 | 10;
// myInt becomes: 14

//text
The __|__ can also be used to get the union of two strings, arrays, lists or sets.
Note that the return type of the union will always be a set.

//code
Set<char> myStringSet = '1235' | '245';
// myStringSet becomes: {'1','2','3','4','5'}

Set<int> mySet = [1,2,3,5] | [2,4,5];
// mySet becomes: {1,2,3,4,5}
 
mySet = {1,2,3,5} | {2,4,5};
// mySet becomes: {1,2,3,4,5}

//subtitle
Bitwise XOR (^^)

//text
The __^^__ operator is used to check if one of both bits is one. 
If one of both bits is one a one wil be return in the new sequence of bits.
If both bits are zero or one a zero wil be return in the new sequence of bits.

//code
int myInt = 0b1100 ^^ 0b1010;
// myInt becomes: 0b0110 whitch is 6

myInt = 12 ^^ 10;
// myInt becomes: 6

//title
Bitwise independed

//text
independed bitwise operators can be used to manipulate a bit sequences.

//tablehead
Operator`   Name

//table
~`	        Bitwise NOT
>>`	        Bitwise signed right shift
<<`	        Bitwise signed left shift
>>>`        Bitwise unsigned right shift
<<<`        Bitwise unsigned left shift
@>>`        Bitwise sigend right shift loop         
@<<`        Bitwise sigend left shift loop
@>>>`       Bitwise unsigend right shift loop         
@<<<`       Bitwise unsigend left shift loop

//subtitle
Bitwise NOT (~)

//text
The __~__ operator is used to flip the bits of the operhand. 

//code
int myInt = ~0b00000000000000000000000000001100;
// myInt becomes: 0b11111111111111111111111111110011 whitch is -13

myInt = ~12;
// myInt becomes: -13

//title
Null safety

//text
Null safety operators are used to manage null values in you program to avoid runtime errors.

//tablehead
Operator`   Name`                   Example

//table
?`          Nullability indicator`  int? myInt = null;
?`          Null-aware`             myObject?.toString(); or myArray?[1]; or myMap?['key'];
??`         Null-coalescing`        myString ?? 'Default value';

//title
Ternary

//text
The __? :__ operators are used to create an if statement that can ben used inside of expressions.
To use the ternary operator write to following structure a boolean expression, __?__, a expression of any type, __:__, a expression of any type.

//code
myBoolean = false;
string myString = myBoolean ? 'True' : 'False';
// myString becomes: 'False'

//title
Assignment

//text
Assignment operators are used to assign or reassigning a value to a variable.
For more information about combined assignment operators check their chapers.

//tablehead
Operator`   Name`                                       Combined operator`  Example`           Same as

//table
=`          Assignment`                                 None`               myInt = 0;`        None
+=`         Addition assignment`                        +`                  myInt += 5;`       myInt = myInt + 5; 
++`         Increment assignment`                       ++`                 myInt++;`          myInt = ++myInt; or myInt = myInt + 1;
-=`         Negatation or Subtraction assignment`       -`                  myInt -= 5;`       myInt = myInt - 5; 
--`         Decrement assignment`                       --`                 myInt--;`          myInt = --myInt; or myInt = myInt - 1;
*=`         Multiplication assignment`                  *`                  myInt *= 5;`       myInt = myInt * 5; 
/=`         Division assignment`                        /`                  myInt /= 5;`       myInt = myInt / 5; 
^=`         Exponentiation assignment`                  ^`                  myInt ^= 5;`       myInt = myInt ^ 5; 
!!`         Factorization`                              !`                  myInt!!;`          myInt = myInt!; 
%=`         Modulation assignment`                      %`                  myInt %= 5;`       myInt = myInt % 5;
&=`         Bitwise AND assignment`                     &`                  myInt &= 5;`       myInt = myInt & 5; 
|=`         Bitwise OR assignment`                      |`                  myInt |= 5;`       myInt = myInt | 5; 
^^=`        Bitwise XOR assignment`                     ^^`                 myInt ^^= 5;`      myInt = myInt ^^ 5; 
~~`         Bitwise Complement assignment`              ~`                  myInt~~;`          myInt = ~myInt;
>>=         Bitwise signed right shift assignment`      >>`                 myInt >>= 5;`      myInt = myInt >> 5; 
<<=`        Bitwise signed left shift assignment`       <<`                 myInt <<= 5;`      myInt = myInt << 5; 
>>>=        Bitwise signed right shift assignment`      >>>`                myInt >>>= 5;`     myInt = myInt >>> 5;  
<<<=`       Bitwise unsigned left shift assignment`     <<<`                myInt <<<= 5;`     myInt = myInt <<< 5; 
@>>>=       Bitwise signed right shift loop assignment` @>>>`               myInt @>>>= 5;`    myInt = myInt @>>> 5;  
@<<<=`      Bitwise unsigned left shift loop assignment`@<<<`               myInt @<<<= 5;`    myInt = myInt @<<< 5; 
??=`        Null-coalescing assignment`                 ??`                 myInt =?? 5;`      myInt = myInt ?? 5; or myInt = myInt == null ? 5 : myInt;  

//subtitle
Assignment (=)

//text
The __=__ is used to assign a literal value or variable to a variable.

//code
int myInt = 0;
int mySecondInt = myInt + 5;
// mySecondInt becomes: 5

//title
Comparison

//text
Comparison operators are used to compare two values with each other to return a bool.

//tablehead
Operator`   Name`                       Example

//table
==`         Equal to`                   myInt == 6
!=`         Not equal to`               myInt != 6
>`          Greater than`               myInt > 6
>=`         Greater than or equal to`   myInt >= 6
<`          Less than`                  myInt < 6
<=`         Less than or equal to`      myInt <= 6

//title
Logical

//text
Logical operators are used to compare two booleans with each other to return one bool.

//tablehead
Operator`   Name`           Example

//table
&&`         Logical and`    true && true     
||`         Logical or`     false && true
!`          Logical not`    !false

//subtile
Logical and (&&)

//text
The __&&__ operator is used the evaluated two boolean expressions when both expressions are evaluated to true the logical and expression is evaluated to true.
To use the logical and operator write a boolean expression followed by __&&__ and ending with another boolean expression.

//code
if(myBoolean && mySecondBoolean){
    // Code that executes when myBoolean and mySecondBoolean are true.
}

//subtile
Logical or (||)

//text
The __||__ operator is used the evaluated two boolean expressions when at least on expression is evaluated to true the logical or expression is evaluated to true.
To use the logical and operator write a boolean expression followed by __||__ and ending with another boolean expression.

//code
if(myBoolean || mySecondBoolean){
    // Code that executes when myBoolean or mySecondBoolean is true.
}

//subtile
Logical not (!)

//text
The __!__ operator can be used to negate/invert a boolean value.
To use the logical not operator write __!__ followed by a boolean expression.

//code
if(!myBoolean){
    // Code that executes when myBoolean is false.
}

//title
Logical Comparison

//text
Logical Comparison operators are used to compare two values with each other.
These operators are different to normal comparison because Logical Comparison operators let you chain multiple comparison operations to the same value.

//tablehead
Operator`   Name`                           Example`            Same as

//table
&==`        And equal to`                   myInt > 5 &== 7`    myInt > 5 && myInt == 7
&!=`        And not equal to`               myInt > 5 &!= 7`    myInt > 5 && myInt != 7 
&>`         And greater than`               myInt < 7 &> 5`     myInt < 5 && myInt > 7 
&>=`        And greater than or equal to`   myInt < 7 &>= 5`    myInt < 5 && myInt >= 7 
&<`         And less than`                  myInt > 5 &< 7`     myInt > 5 && myInt < 7 
&<=`        And less than or equal to`      myInt > 5 &<= 7`    myInt > 5 && myInt <= 7
|==`        Or equal to`                    myInt > 5 |== 3`    myInt > 5 || myInt == 3
|!=`        Or not equal to`                myInt > 5 |!= 3`    myInt > 5 || myInt != 3
|>`         Or greater than`                myInt < 7 |> 5`     myInt < 5 || myInt > 7
|>=`        Or greater than or equal to`    myInt < 7 |>= 5`    myInt < 5 || myInt >= 7
|<`         Or less than`                   myInt > 5 |< 3`     myInt > 5 || myInt < 3
|<=`        Or less than or equal to`       myInt > 5 |< 3`     myInt > 5 || myInt < 3             

//title
Optional expression

//text
//NOTE de uitleg die ik nu heb gescheven ben ik nog niet helemaal tevreden mee dus als jij het anders wilt uitleggen (graag) is dat geen probleem ik hoop
//dat de uitleg die ik nu hebt gescheven duidelijk voor jouw is om het te hunnen herschijven ook is heb ik nog geen gewelidige naam kunnen verzinnen.
Optional expressions can be used to define a expression that only get evaluated when a boolean is true.
The following operators can be used with this operator.

//tablehead
Operator`   optional expression operator(s)`

//table
=`          <?                                              
+=`         <? 
-=`         <? 
*=`         <? 
/=`         <? 
^=`         <? 
%=`         <?
&=`         <? 
|=`         <? 
^^=`        <?
>>=`        <?
<<=`        <?
>>>=`       <? 
<<<=`       <?
@>>>=`      <? 
@<<<=`      <?
+`          <? or >? 
-`          <? or >? 
*`          <? or >? 
/`          <? or >? 
^`          <? or >? 
%`          <? or >? 
|`          <? or >? 
^^`         <? or >? 
>>`         <? or >?
<<`         <? or >? 
>>>`        <? or >?
<<<`        <? or >? 
@>>>`       <? or >?  
@<<<`       <? or >? 
,`          <? or >? 

//subtitle
Left optional expression (<?)

//text
The __<?__  operator is used to define a optional expression with the operator on the lefthand side.
To use this operator write a valid operator followed by a boolean expression and ending with a literal value or variable.

When the boolean expression is evaluated to true the value will be included in the expression.
When the boolean expression is evaluated to false the literal value or variable and the operator before the boolean expression will be ignored.

//code
int? myInt = myBoolean <? 7;
// myInt becomes: 7 when myBoolean is true
// myInt becomes: null when myBoolean is false

myInt = 5 + myBoolean <? 7;
// myInt becomes: 12 when myBoolean is true
// myInt becomes: 5 when myBoolean is false

myString = myBoolean <? 'Hello World!';
// myString becomes: "Hello World!" when myBoolean is true
// myString keeps the current value when myBoolean is false

//text
The __<?__ operator can also be used on a __,__ to optionaly add values to collections.

int[] myArray = [1,2,myBoolean <? 3]
// myArray becomes: [1,2,3] when myBoolean is true
// myArray becomes: [1,2] when myBoolean is false

//subtitle
Right optional expression (>?)

//text
The __>?__  operator is used to define a optional expression with the operator on the righthand side.
To use this operator write a boolean expression followed by a literal value or variable and ending with a valid operator.

When the boolean expression is evaluated to true the value will be included in the expression.
When the boolean expression is evaluated to false the literal value or variable and the operator after the literal value or variable will be ignored.

//code
int myInt = myBoolean >? 7 + 5;
// myInt becomes: 12 when myBoolean is true
// myInt becomes: 5 when myBoolean is false

myString = myBoolean >? 'Hello ' + 'World!';
// myString becomes: "Hello World!" when myBoolean is true
// myString becomes: "World!" when myBoolean is false

//text
The __>?__ operator can also be used on a __,__ to optionaly add values to collections.

int[] myArray = [myBoolean >? 1,2,3]
// myArray becomes: [1,2,3] when myBoolean is true
// myArray becomes: [2,3] when myBoolean is false

//chapter
Control statements

//text
Control statements are statements that direct the flow of your code to a desired path.

//title
Branching

//text
Branching statements are used when you want to branch your code in a well defined path.

//subtitle
If (if)

//text
The __if__ keyword is used when a specific block of code can only be executed under a specfied conditition.
To create an __if__ statement write __if__ followed by __()__ and ending with __{}__.
The body of an if statement only gets executed when the expression inside the __()__ is evaluated to __true__.

//code
if(myBoolean){
    // Code that executes when myBoolean is true.
}

if(myInt > 5){
    // Code that executes when myInt is greater than 5.
}

//subtitle
Else (else)

//text
The __else__ keyword can be used when a specfied block of code can only be executed when the parent if expression is evaluated to false.
To create an __else__ statement write __else__ followed by a __{}__.
Note that any __else__ statement must be bounded to an if, else if, while or for statement.

//code
if(myBoolean){
    // Code that executes when myBoolean is true.
}else{
    // Code that executes when myBoolean is false.
}

//text
The __else__ statement can also be bounded to any else if statement.
Note that the else statement only gets executed when the if and all the else if expressions are evaluated to false. 

//code
if(myBoolean){
    // Code that executes when myBoolean is true.
}else if(mySecondBoolean){
    // Code that executes when myBoolean is false and mySecondBoolean is true.
}else{
    // Code that executes when myBoolean is false and mySecondBoolean is false.
}

//text
The __else__ statement can also be bounded to any for or while loop or switch.
Note that the else statement only gets executed when the loop or switch finishes without executing a break.

//code
for(int value in values){
    // Code that executes for every value of values.
}else{
    // Code that executes when the loop ended.
}

while(myBoolean){
    // Code that executes for as long as myBoolean is true.
}else{
    // Code that executes when the loop ended.
}

switch (myInt)
{
    case(5){
        // Code that executes when myInt is 5.
        break;
    }
    case(6){
        // Code that executes when myInt is not 5 and is 6.
        break;
    }
}else{
    // Code that executes when the switch finishes.
}


//subtitle
Else if (else if)
The __else if__ keywords are used when a specfied block of code can only be executed when the parent if expression is returned to false and another expression is evaluated to true.
To create an __else if__ statement write __else if__ followed by __()__ and ending with __{}__.
Note that any __else if__ statement must be bounded to an if or else if statement.

//code
if(myBoolean){
    // Code that executes when myBoolean is true.
}else if(mySecondBoolean){
    // Code that executes when myBoolean is false and mySecondBoolean is true.
}

//text
The __else if__ statements can be stacked as many times as needed.

//code
if(myBoolean){
    // Code that executes when myBoolean is true.
}else if(mySecondBoolean){
    // Code that executes when myBoolean is false and mySecondBoolean is true.
}else if(myThirdBoolean){
    // Code that executes when myBoolean is false and mySecondBoolean is false and myThirdBoolean is true.
}

//subtitle
Switch (switch), (case), (default), (break)

//text
The __switch__ keyword is used to check a certain value for many cases.
To create a __switch__ statement write __switch__ followed by __()__ and ending with __{}__.
Inside the __()__ enter any value.

The __case__ keyword is used to define a block of code that gets executed when the value from the switch is equal to the value(s) in the switch statement.
To create a case write __case__ followed by __()__ and ending with __{}__ inside the __{}__.
Inside the __()__ enter any value with the same type as the value from the switch statement.
Any number of case statements is allowed.

//code
switch(myInt)
{
    case(5){
        // Code that executes when myInt is 5.
    }
    case(6){
        // Code that executes when myInt is 6.
    }
}

//text
The __,__ can be used to define multiple values in one switch statement.
These comma separated values work like a logical or operator.

//code
switch(myInt)
{
    case(5,6){
        // Code that executes when myInt is 5 or 6.
    }
}

//text
The __break__ keyword can be used to break out of the switch statement and stops checking any other cases.

//code
switch(myInt)
{
    case (5){
        // Code that executes when myInt is 5.
        break;
    }
    case (6){
        // Code that executes when myInt is 6.
        break;
    }
}

//text
The __else__ statement can be used to define a block of code that only gets executed when the switch finishes without encountering a __break__ statement.

//code
switch (myInt)
{
    case(5){
        // Code that executes when myInt is 5.
        break;
    }
    case(6){
        // Code that executes when myInt is not 5 and is 6.
        break;
    }
}else{

}

//title
Looping

//text
Loops are used to iterate over sequences or code that needs to run for a specfied amount of times.

//subtitle
For (for), (in), (with)

//text
The __for__ keyword is used to define a block of code that can be executed multiple times.
To create a for loop write __for__ followed by __()__ and ending with __{}__.

The __in__ keyword is used to bind variable(s) to a given collection of items.
To create an in statement write one or two variable separated declarations followed by __in__ ending with a collection.

Note that in statements can only be defined between the __()__ of a __for loop__.

//code
for(string value in myArray){
    print(value);
    // Code that executes for every value of the myArray array.
}

Map<string,int> myMap = {'FirstValue':4,'SecondValue':9};
for(string key, int value in myMap){
    print(index);
    print(value);
    // Code that executes for every value of the myArray array.
}

//text
The __with__ keyword is used to bind a int variable to a for in loop its index.
To use the __with__ statement write after the content in the __()__ __with__ followed by a int variable declaration.

//code
for(string value in myArray with int index){
    print(value);
    print(index);
    // Code that executes for every value of the myArray array.
}

//text
The __for loop__ can also be used to loop a defined amount of times by defining two code statements and one boolean expression.
To create such a __for loop__ write inside the __()__ of the for loop a code statement followed by a boolean expression and ending with another code statement.
The first code statement wil only be executed once when the loop gets executed.
The boolean expression will be executed before each iteration when evaluated to true the code block of the __for loop__ wil be executed.
The second code statement will be executed at the end of every iteration.

//code
for(int i = 0; i < 10; i++){
    // Code that executes for as long as i is less than 10.
}

//subtitle
While (while), (do)

//text
The __while__ keyword is used to define a block of code that gets executed while a boolean expression is evaluated to __true__.
To create a __while loop__ write __while__ followed by __()__ and ending with __{}__.
Note that when myBoolean is __false__ before the __while loop__ is executed, the codeblock of the __while loop__ never gets executed.

//code
while(myBoolean){
    // Code that executes as long as myBoolean is true.
}

//text
The __do__ keyword is used to move the code block from the while loop to above the while loop so the code block always gets executed at least once.
To create a __do while loop__ write __do__ then __{}__ followed by __while__ and ending with __()__.
Between the __()__ a boolean expression is required.
Note that when myBoolean is __false__ before the __do while loop__ is executed, the code block of the __do while loop__ gets executed once.

//code
do{
    // Code that executes at least once, after which it executes as long as myBoolean is true.
}while(myBoolean)


//subtile
Else after loops (else)

//text
The __else__ keyword can be used to bind a block of code to any loop. This code gets executed when the loop finishes without encountering a __break__ statement.
To bind the __else__ statement write __else__ followed by __{}__.

//code
for(string value in myArray){
    // Code that executes for every value of the myArray array.
}else{
    // Code that executes when the for loop finishes.
}

for(int i = 0; i < 10; i++){
    // Code that executes for as long as i is less than 10.
}else{
    // Code that executes when the for loop finishes.
}

do{
    // Code that executes at least once, after which it executes as long as myBoolean is true.
}while(myBoolean)else{
    // Code that executes when the do while loop finishes.
}

//text
When using the __break__ statement inside a loop the else statement wil not be executed.

//code
for(string value in myArray){
    break;    
}else{
    // Code gets never executed because the break statement is used.
}

//subtitle
Break (break)

//text
The __break__ keyword is used to exit/break out of any loop.
To use a __break__ statement write __break__ and ending with a __;__.
Note that code after a break statement does not get executed.

//code
for(int i = 0; i < 10; i++){
    // Code that executes for as long as i is less than or equal to 5.
    if(i == 5){
        break;
        // Code that never gets executed.
    }
    // Code that executes for as long as i is less than 5.
}

//text
When using the __break__ statement the else statement of any loop wil not be executed.

//code
for(string value in myArray){
    break;    
}else{
    // Code gets never executed because the break statement is used.
}


//subtitle
Continue (continue)

//text
The continue keyword is used to stop/break out of the current iteration of the loop, and continue to the next iteration of said loop.
To use a continue statement write __continue__ followed by a __;__.
Note that code after a continue statement does not get executed.

//code
for(int i = 0; i < 10; i++){
    // Code that executes for as long as i is less than or equal to 5.
    if(i == 5){
        continue;
        // Code that never gets executed.
    }
    // Code that executes for every iteration except as when i is equal to 5.
}

//title
Error handling

//title
Null safety handling
