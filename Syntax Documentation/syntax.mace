/*
The MACE syntax file
====================

This file will explain all syntax used in v1.0

First we will define the syntax that makes it possible to convert this file easily to an HTML page.
No tags are used inside other tags.

The shortcodes are:
//chapter
Your chapter here


//title
Your title here


//subtitle
Your subtitle here


//text
Your text here


//code
Your code here


//comment
Your comment here (this text should not be compiled to html)

//tablehead
Your table titles here

//table
Your table elements here saperate collums by a comma

__Your label here__

*/

//start

//chapter
Namespaces

//title
Creating

//text
To create a namespace write the __namespace__ keyword, followed by the name of the namespace with opening and closing curly brackets,
When defining fields, methods and classes they are automatically static, so the __static__ keyword is not required.

//code
namespace MyNamespace
{
    //your classes and static fields
}

//text
Namespace with classes, methods and fields

//code
namespace MyNamespace
{
    int myInt = 0;

    void myMethod()
    {

    }

    class MyClass
    {
    
    }
}

//title
Using

//text
To use a namespace, write __using__ followed by the path where the namespace is located ending with a __;__.
All public elements in the namespace can be directly accessed.

//code
using ./MyNamespace;
myFirstDirectlyAccessedElement;

//text
If you want to use specific elements of a namespace, add your elements separated by commas.
Next, write __from__, followed by the path and your namespace ending with a __;__.
To access an element of a namespace, use the name of the elements.

//code
using myFirstElement, mySecondElement from ./MyNamespace;

myFirstElement;
mySecondElement;

//text
If you want to name your namespace write __as__ after your namespace path followed by a given namespace name.
To access an element of a named namespace, write the given name followed by an element.

//code
using ./MyNamespace as MyNamedNamespace;
using myFirstElement, mySecondElement from ./MySecondNamespace as MySecondNamedNamespace;

MyNamedNamespace.myFirstElement;
MySecondNamedNamespace.mySecondElement;

//text
If you want to rename your namespace elements, write __as__ after the element followed with your new name;
To access a renamed element of a namespace, use the renamed name of the elements.

//code
using myFirstElement as myFirstRenamedElement, mySecondElement as mySecondRenamedElement from ./MyNamespace;
using myFirstElement as myFirstRenamedElement from ./MySecondNamespace as MySecondNamedNamespace;

myFirstRenamedElement;
mySecondRenamedElement;

MySecondNamedNamespace.myFirstRenamedElement;

//title
Using system namepaces

//text
If you want to use any namespace from the mace system namespaces, write __system__ before your __using__ statement. 
This wil start your namespace path in the system directory. This means that adding the ./ prefix in your namespace path is not required.

//code
system using Networking/RequestManager;

//chapter
Classes

//title
Creating

//text
To create a class write __class__ followed by the name of the class followed by __{}__.
You can define any fields or methods in a class.
To create an instance of a class use the class name followed by __()__ ending with a __;__.
You can only define a class in a namespace.
Classes will automatically be private.

//code
namespace MyNamespace
{
    class MyClass
    {
       
    }

    class MySecondClass
    {
       int myInt = 0;

       void myMethod()
       {

       }
    }
}

MyClass();
MySecondClass();

//title
Inheritance

//text
To inherit a class from another class use the a __:__ after the child class its name followed the name of the class you want to inherit from.
When a class inherits from another class you can access the parent class its fields and methods.

//code
class MyClass
{
    public int myInt = 0;

    public void myMethod(int value)
    {

    }
}

class MySecondClass : MyClass
{
    MySecondClass(){
        myMethod(myInt);
    }
}

//title
Abstraction

//text
Write __abstract__ before your class, field or method to make it abstract.
When a class, field or method is abstract it means that is it depended.

//subtitle
Classes

//text 
When a class is abstract the class can only be Inherited by another class.
This means that you can not create an instance of an abstract class.

//code
abstract class MyClass
{
    public int myInt = 0;

    public void myMethod(int value)
    {

    }
}

class MySecondClass : MyClass
{
    MySecondClass(){
        myMethod(myInt);
    }
}

//subtitle
Fields and methods

//text
Only abstract classes can contain abstract fields and methods. 
When a field or method is abstract this means that they need to be implemented in the child class.
When using the abstract keyword you can not use an access modifier on this field or method.
To implement an abstract field or method write __override__ before the field or method.
It is important that the field you want to implement has the same type and identifier as the one you want to override.
If a field is an abstract field it can not have a default value.
The same applies for methods, the implemented method needs to have the same return type, identifier and parameters as the method you want to override.
When an abstract method has code, this code will be run before the code from the child class.

//code
abstract class MyClass
{
    abstract int myInt;

    abstract void myMethod(int value)
    {

    }
}

class MySecondClass : MyClass
{
    override int myInt;
    
    override void myMethod(int value)
    {

    }
}

//text
When a class is sealed, the class cannot be used as a super class.
The class cannot be Inherited by another class.
A sealed class cannot contain abstract fields or methods.

//code
sealed class MyClass
{
    int myInt;

    void myMethod(int value)
    {

    }
}


//text
When using the same identifier in the parent class and child class the child class will ovveride the parent identifier.
Use __super__ to only access the fields and methods of the parent class.
Use __this__ to only access the fields and methods of the current class.

//code
class MyClass
{
    public int myInt = 0;

    public void myMethod(int value)
    {

    }
}

class MySecondClass : MyClass
{
    MySecondClass(){
        myMethod();
        super.myMethod(myInt);
        this.myMethod(myInt);
    }

    public void myMethod(int value)
    {

    }
}

//title
Constructor

//text
To create a constructor write the class name followed by a function body.
Named constructors can be created by writing the constructor followed by an access operator and your constructor name.
The code of a constructor will be run when you create an instance of the class.

//code
class MyClass
{
    MyClass()
    {
        //your constructor code
    }

    MyClass.MyNamedConstructor()
    {
        //your named constructor code
    }
}

MyClass();
MyClass.MyNamedConstructor();

//text
A constructor can call another constructor by using a __:__ after the parameter body followed by __this__.
If you want to call a named constructor use the access operator and your constructor name after the this keyword.

//code
class MyClass
{
    MyClass() : this.MySecondNamedConstructor(){
        //your constructor code
    }

    MyClass.MyNamedConstructor() : this()
    {
        //your named constructor code
    }

    MyClass.MySecondNamedConstructor()
    {
        //your named second constructor code
    }
}

//title
Destructor

//text
A destructor is optional, but if created it will be run when a instance of a object is deleted.
No parameters can be added to the destructor parameter body.

//code
class MyClass
{
    ~MyClass(){
        
    }
}

//title
Methods

//text
Short assignment of fields in class methods or constructors can be accomplished by using a different syntax in the parameter body.
When using short assignment the parameters are assigned to the variables in the class automatically.
Short assignment can also be used with the super class.
Note that code can still be added to the body of the method as shown below and that the parameters can still be used inside the body.

//code
class MyClass
{
    int myInt = 0;
    string myString = "Hello World!"

    MyClass(this.myInt, this.myString)
    {
        //your constructor code
    }

    myMethod(this.myInt, this.myString)
    {
        myString += " Goodbye!"
        //your method code
    }
}

//code
class MyClass
{
    int myInt = 0;
}

class MySecondClass : MyClass
{
    int mySecondInt;
    MySecondClass(this.mySecondInt, super.myInt){
        //your constructor code
    }
}

//text
To have a constant or read only variable in your class, but you want to initialize it in the constructor, use the keyword __initialize__.
The variable can also be initialized via short assignment.
The variable can only be overwritten in the constructor scope. 

//code
class MyClass
{
    initialize const int myInt;
    initialize readonly string myString = "Hello World!";

    MyClass(this.myInt, myString)
    {
        this.myString = myString;
        //your constructor code
    }
}

//title
Getters and Setters

//text
Getters and setters are methods that will be run when the specific field is accessed.
The keywords __public__, __private__ and __protected__ can be added to getters and setters.
These access modifiers override the default getters and setters of the fields.
Note that in the example the integer was initialially private, but has become public because of the getter and setter.

//code
class MyClass
{
    int myInt;

    MyClass(this.myInt)
    {
        //your constructor code
    }

    public get.myInt(){
        return myInt+1;
    }

    public set.myInt(int myInt){
        this.myInt = myInt-1;
    }
}


//title
Lambda funtions

//chapter
Variables

//Text
Mace has the following primitive data types.
Define variables by writing the following structure; a variable keyword or object type, a unique identifier, an equal sign, your expression and a semicolon.

//table
string
char
int
double
bool
percent

//title
Strings

//text
A string is an object that stores an array of characters.
You can define a string by using __''__ or __""__.

//code
string myString = "Hello World!";
myString = 'Hello World!';

//text
To concatenate two strings use the plus operator.
You can concatenate literal strings and string variables.

//code
string myString = 'Hello' + "World!";

string myDoubleString = myString + myString;

//text
To use string interpolation use a dollarSign.

//text
Read a character from a string by using __[]__.
Indexing starts at index 0.

//code
string myString = "Hello World!";
myString[0];