{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Mace",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#character"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#constant"
		},
		{
			"include": "#number"
		},
		{
			"include": "#variable-name"
		},
		{
			"include": "#function-name"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.mace",
					"match": "\\b(if|while|for|return|in|case|switch)\\b"
				},
				{
					"name": "keyword",
					"match": "\\b(string|void|int|double|class|char|bool|percent)\\b"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.mace",
					"begin": "\"(?!\\\\?.\")",
					"end": "\"",
					"patterns": [
						{
							"include": "#escape"
						}
					]
				},
				{
					"name": "string.mace",
					"begin": "'(?!\\\\?.')",
					"end": "'",
					"patterns": [
						{
							"include": "#escape"
						}
					]
				}
			]
		},
		"character": {
			"patterns": [
				{
					"name": "string.regexp.mace",
					"begin": "\"(?=\\\\?.\")",
					"end": "\"",
					"patterns": [
						{
							"include": "#escape"
						}
					]
				},
				{
					"name": "string.regexp.mace",
					"begin": "'(?=\\\\?.')",
					"end": "'",
					"patterns": [
						{
							"include": "#escape"
						}
					]
				}
			]
		},
		"escape": {
			"name": "constant.character.escape.mace",
			"match": "\\\\."
		},
		"comments": {
			"patterns": [
				{
					"begin": "/\\*\\*(?!/)",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.mace"
						}
					},
					"end": "\\*/",
					"name": "comment.block.documentation.mace"
				},
				{
					"begin": "/\\*",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.mace"
						}
					},
					"end": "\\*/",
					"name": "comment.block.mace"
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.mace"
						}
					},
					"match": "(//).*$\\n?",
					"name": "comment.line.double-slash.mace"
				}
			]
		},
		"constant": {
			"match": "\\b(?:true|false|null)\\b",
			"name": "constant.language.mace"
		},
		"number": {
			"match": "(?x)        # turn on extended mode\n  -?        # an optional minus\n  (?:\n    0       # a zero\n    |       # ...or...\n    [1-9]   # a 1-9 character\n    \\d*     # followed by zero or more digits\n  )\n  (?:\n    (?:\n      \\.    # a period\n      \\d+   # followed by one or more digits\n    )?\n    (?:\n      [eE]  # an e character\n      [+-]? # followed by an option +/-\n      \\d+   # followed by one or more digits\n    )?      # make exponent optional\n  )?        # make decimal portion optional",
			"name": "constant.numeric.mace"
		},
		"variable-name": {
			"match": "([A-Za-z][A-Za-z_0-9]*)(?![A-Za-z_0-9]*[\\s]*\\()",
			"name": "variable.mace"
		},
		"function-name": {
			"match": "([A-Za-z_][A-Za-z_0-9]*)(?=[\\s]*\\()",
			"name": "entity.name.function.mace"
		}
	},
	"scopeName": "source.mace"
}